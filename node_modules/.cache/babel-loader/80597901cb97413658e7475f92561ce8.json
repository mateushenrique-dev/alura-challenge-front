{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var joined = args.map(function (x) {\n    return source(x);\n  }).join(\"\");\n  return joined;\n}\n/*\nLanguage: Tcl\nDescription: Tcl is a very simple programming language.\nAuthor: Radek Liska <radekliska@gmail.com>\nWebsite: https://www.tcl.tk/about/language.html\n*/\n\n\nfunction tcl(hljs) {\n  var TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;\n  var NUMBER = {\n    className: 'number',\n    variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n  };\n  var KEYWORDS = [\"after\", \"append\", \"apply\", \"array\", \"auto_execok\", \"auto_import\", \"auto_load\", \"auto_mkindex\", \"auto_mkindex_old\", \"auto_qualify\", \"auto_reset\", \"bgerror\", \"binary\", \"break\", \"catch\", \"cd\", \"chan\", \"clock\", \"close\", \"concat\", \"continue\", \"dde\", \"dict\", \"encoding\", \"eof\", \"error\", \"eval\", \"exec\", \"exit\", \"expr\", \"fblocked\", \"fconfigure\", \"fcopy\", \"file\", \"fileevent\", \"filename\", \"flush\", \"for\", \"foreach\", \"format\", \"gets\", \"glob\", \"global\", \"history\", \"http\", \"if\", \"incr\", \"info\", \"interp\", \"join\", \"lappend|10\", \"lassign|10\", \"lindex|10\", \"linsert|10\", \"list\", \"llength|10\", \"load\", \"lrange|10\", \"lrepeat|10\", \"lreplace|10\", \"lreverse|10\", \"lsearch|10\", \"lset|10\", \"lsort|10\", \"mathfunc\", \"mathop\", \"memory\", \"msgcat\", \"namespace\", \"open\", \"package\", \"parray\", \"pid\", \"pkg::create\", \"pkg_mkIndex\", \"platform\", \"platform::shell\", \"proc\", \"puts\", \"pwd\", \"read\", \"refchan\", \"regexp\", \"registry\", \"regsub|10\", \"rename\", \"return\", \"safe\", \"scan\", \"seek\", \"set\", \"socket\", \"source\", \"split\", \"string\", \"subst\", \"switch\", \"tcl_endOfWord\", \"tcl_findLibrary\", \"tcl_startOfNextWord\", \"tcl_startOfPreviousWord\", \"tcl_wordBreakAfter\", \"tcl_wordBreakBefore\", \"tcltest\", \"tclvars\", \"tell\", \"time\", \"tm\", \"trace\", \"unknown\", \"unload\", \"unset\", \"update\", \"uplevel\", \"upvar\", \"variable\", \"vwait\", \"while\"];\n  return {\n    name: 'Tcl',\n    aliases: ['tk'],\n    keywords: KEYWORDS,\n    contains: [hljs.COMMENT(';[ \\\\t]*#', '$'), hljs.COMMENT('^[ \\\\t]*#', '$'), {\n      beginKeywords: 'proc',\n      end: '[\\\\{]',\n      excludeEnd: true,\n      contains: [{\n        className: 'title',\n        begin: '[ \\\\t\\\\n\\\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n        end: '[ \\\\t\\\\n\\\\r]',\n        endsWithParent: true,\n        excludeEnd: true\n      }]\n    }, {\n      className: \"variable\",\n      variants: [{\n        begin: concat(/\\$/, optional(/::/), TCL_IDENT, '(::', TCL_IDENT, ')*')\n      }, {\n        begin: '\\\\$\\\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n        end: '\\\\}',\n        contains: [NUMBER]\n      }]\n    }, {\n      className: 'string',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null\n      })]\n    }, NUMBER]\n  };\n}\n\nmodule.exports = tcl;","map":{"version":3,"sources":["/home/mateus/Documents/Projects/alura-challenge/node_modules/highlight.js/lib/languages/tcl.js"],"names":["source","re","optional","concat","args","joined","map","x","join","tcl","hljs","TCL_IDENT","NUMBER","className","variants","BINARY_NUMBER_MODE","C_NUMBER_MODE","KEYWORDS","name","aliases","keywords","contains","COMMENT","beginKeywords","end","excludeEnd","begin","endsWithParent","BACKSLASH_ESCAPE","inherit","QUOTE_STRING_MODE","illegal","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Tcl\nDescription: Tcl is a very simple programming language.\nAuthor: Radek Liska <radekliska@gmail.com>\nWebsite: https://www.tcl.tk/about/language.html\n*/\n\nfunction tcl(hljs) {\n  const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;\n\n  const NUMBER = {\n    className: 'number',\n    variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n  };\n\n  const KEYWORDS = [\n    \"after\",\n    \"append\",\n    \"apply\",\n    \"array\",\n    \"auto_execok\",\n    \"auto_import\",\n    \"auto_load\",\n    \"auto_mkindex\",\n    \"auto_mkindex_old\",\n    \"auto_qualify\",\n    \"auto_reset\",\n    \"bgerror\",\n    \"binary\",\n    \"break\",\n    \"catch\",\n    \"cd\",\n    \"chan\",\n    \"clock\",\n    \"close\",\n    \"concat\",\n    \"continue\",\n    \"dde\",\n    \"dict\",\n    \"encoding\",\n    \"eof\",\n    \"error\",\n    \"eval\",\n    \"exec\",\n    \"exit\",\n    \"expr\",\n    \"fblocked\",\n    \"fconfigure\",\n    \"fcopy\",\n    \"file\",\n    \"fileevent\",\n    \"filename\",\n    \"flush\",\n    \"for\",\n    \"foreach\",\n    \"format\",\n    \"gets\",\n    \"glob\",\n    \"global\",\n    \"history\",\n    \"http\",\n    \"if\",\n    \"incr\",\n    \"info\",\n    \"interp\",\n    \"join\",\n    \"lappend|10\",\n    \"lassign|10\",\n    \"lindex|10\",\n    \"linsert|10\",\n    \"list\",\n    \"llength|10\",\n    \"load\",\n    \"lrange|10\",\n    \"lrepeat|10\",\n    \"lreplace|10\",\n    \"lreverse|10\",\n    \"lsearch|10\",\n    \"lset|10\",\n    \"lsort|10\",\n    \"mathfunc\",\n    \"mathop\",\n    \"memory\",\n    \"msgcat\",\n    \"namespace\",\n    \"open\",\n    \"package\",\n    \"parray\",\n    \"pid\",\n    \"pkg::create\",\n    \"pkg_mkIndex\",\n    \"platform\",\n    \"platform::shell\",\n    \"proc\",\n    \"puts\",\n    \"pwd\",\n    \"read\",\n    \"refchan\",\n    \"regexp\",\n    \"registry\",\n    \"regsub|10\",\n    \"rename\",\n    \"return\",\n    \"safe\",\n    \"scan\",\n    \"seek\",\n    \"set\",\n    \"socket\",\n    \"source\",\n    \"split\",\n    \"string\",\n    \"subst\",\n    \"switch\",\n    \"tcl_endOfWord\",\n    \"tcl_findLibrary\",\n    \"tcl_startOfNextWord\",\n    \"tcl_startOfPreviousWord\",\n    \"tcl_wordBreakAfter\",\n    \"tcl_wordBreakBefore\",\n    \"tcltest\",\n    \"tclvars\",\n    \"tell\",\n    \"time\",\n    \"tm\",\n    \"trace\",\n    \"unknown\",\n    \"unload\",\n    \"unset\",\n    \"update\",\n    \"uplevel\",\n    \"upvar\",\n    \"variable\",\n    \"vwait\",\n    \"while\"\n  ];\n\n  return {\n    name: 'Tcl',\n    aliases: ['tk'],\n    keywords: KEYWORDS,\n    contains: [\n      hljs.COMMENT(';[ \\\\t]*#', '$'),\n      hljs.COMMENT('^[ \\\\t]*#', '$'),\n      {\n        beginKeywords: 'proc',\n        end: '[\\\\{]',\n        excludeEnd: true,\n        contains: [\n          {\n            className: 'title',\n            begin: '[ \\\\t\\\\n\\\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n            end: '[ \\\\t\\\\n\\\\r]',\n            endsWithParent: true,\n            excludeEnd: true\n          }\n        ]\n      },\n      {\n        className: \"variable\",\n        variants: [\n          {\n            begin: concat(\n              /\\$/,\n              optional(/::/),\n              TCL_IDENT,\n              '(::',\n              TCL_IDENT,\n              ')*'\n            )\n          },\n          {\n            begin: '\\\\$\\\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',\n            end: '\\\\}',\n            contains: [\n              NUMBER\n            ]\n          }\n        ]\n      },\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})\n        ]\n      },\n      NUMBER\n    ]\n  }\n}\n\nmodule.exports = tcl;\n"]},"metadata":{},"sourceType":"script"}
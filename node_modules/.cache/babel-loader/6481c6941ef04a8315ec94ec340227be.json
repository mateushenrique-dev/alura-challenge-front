{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\n\n\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' + (opts.capture ? \"\" : \"?:\") + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\n\n\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  const NUMBER_TYPES_RE = either( // Special case: only hexadecimal binary powers can contain fractions\n  /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/, // Hexadecimal numbers without fraction and optional binary power\n  /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/, // Decimal numbers\n  /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/);\n  const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n  const PUNCTUATION_RE = either(/[()]/, /[{}]/, /\\[\\[/, /[[\\]]/, /\\\\/, /,/);\n  return {\n    name: 'R',\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword: 'function if in break next repeat else for while',\n      literal: 'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' + 'NA_character_|10 NA_complex_|10',\n      built_in: // Builtin constants\n      'LETTERS letters month.abb month.name pi T F ' + // Primitive functions\n      // These are all the functions in `base` that are implemented as a\n      // `.Primitive`, minus those functions that are also keywords.\n      'abs acos acosh all any anyNA Arg as.call as.character ' + 'as.complex as.double as.environment as.integer as.logical ' + 'as.null.default as.numeric as.raw asin asinh atan atanh attr ' + 'attributes baseenv browser c call ceiling class Conj cos cosh ' + 'cospi cummax cummin cumprod cumsum digamma dim dimnames ' + 'emptyenv exp expression floor forceAndCall gamma gc.time ' + 'globalenv Im interactive invisible is.array is.atomic is.call ' + 'is.character is.complex is.double is.environment is.expression ' + 'is.finite is.function is.infinite is.integer is.language ' + 'is.list is.logical is.matrix is.na is.name is.nan is.null ' + 'is.numeric is.object is.pairlist is.raw is.recursive is.single ' + 'is.symbol lazyLoadDBfetch length lgamma list log max min ' + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' + 'proc.time prod quote range Re rep retracemem return round ' + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' + 'standardGeneric substitute sum switch tan tanh tanpi tracemem ' + 'trigamma trunc unclass untracemem UseMethod xtfrm'\n    },\n    contains: [// Roxygen comments\n    hljs.COMMENT(/#'/, /$/, {\n      contains: [{\n        // Handle `@examples` separately to cause all subsequent code\n        // until the next `@`-tag on its own line to be kept as-is,\n        // preventing highlighting. This code is example R code, so nested\n        // doctags shouldn’t be treated as such. See\n        // `test/markup/r/roxygen.txt` for an example.\n        scope: 'doctag',\n        begin: '@examples',\n        starts: {\n          contains: [{\n            begin: /\\n/\n          }, {\n            begin: /#'\\s*(?=@[a-zA-Z]+)/,\n            endsParent: true\n          }, {\n            begin: /#'/,\n            end: /$/,\n            excludeBegin: true\n          }]\n        }\n      }, {\n        // Handle `@param` to highlight the parameter name following\n        // after.\n        scope: 'doctag',\n        begin: '@param',\n        end: /$/,\n        contains: [{\n          scope: 'variable',\n          variants: [{\n            begin: IDENT_RE\n          }, {\n            begin: /`(?:\\\\.|[^`\\\\])+`/\n          }],\n          endsParent: true\n        }]\n      }, {\n        scope: 'doctag',\n        begin: /@[a-zA-Z]+/\n      }, {\n        scope: 'keyword',\n        begin: /\\\\[a-zA-Z]+/\n      }]\n    }), hljs.HASH_COMMENT_MODE, {\n      scope: 'string',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\(/,\n        end: /\\)(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\{/,\n        end: /\\}(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\[/,\n        end: /\\](-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\(/,\n        end: /\\)(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\{/,\n        end: /\\}(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\[/,\n        end: /\\](-*)'/\n      }), {\n        begin: '\"',\n        end: '\"',\n        relevance: 0\n      }, {\n        begin: \"'\",\n        end: \"'\",\n        relevance: 0\n      }]\n    }, // Matching numbers immediately following punctuation and operators is\n    // tricky since we need to look at the character ahead of a number to\n    // ensure the number is not part of an identifier, and we cannot use\n    // negative look-behind assertions. So instead we explicitly handle all\n    // possible combinations of (operator|punctuation), number.\n    // TODO: replace with negative look-behind when available\n    // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n    // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n    // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n    {\n      relevance: 0,\n      variants: [{\n        scope: {\n          1: 'operator',\n          2: 'number'\n        },\n        match: [OPERATORS_RE, NUMBER_TYPES_RE]\n      }, {\n        scope: {\n          1: 'operator',\n          2: 'number'\n        },\n        match: [/%[^%]*%/, NUMBER_TYPES_RE]\n      }, {\n        scope: {\n          1: 'punctuation',\n          2: 'number'\n        },\n        match: [PUNCTUATION_RE, NUMBER_TYPES_RE]\n      }, {\n        scope: {\n          2: 'number'\n        },\n        match: [/[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\n        NUMBER_TYPES_RE]\n      }]\n    }, // Operators/punctuation when they're not directly followed by numbers\n    {\n      // Relevance boost for the most common assignment form.\n      scope: {\n        3: 'operator'\n      },\n      match: [IDENT_RE, /\\s+/, /<-/, /\\s+/]\n    }, {\n      scope: 'operator',\n      relevance: 0,\n      variants: [{\n        match: OPERATORS_RE\n      }, {\n        match: /%[^%]*%/\n      }]\n    }, {\n      scope: 'punctuation',\n      relevance: 0,\n      match: PUNCTUATION_RE\n    }, {\n      // Escaped identifier\n      begin: '`',\n      end: '`',\n      contains: [{\n        begin: /\\\\./\n      }]\n    }]\n  };\n}\n\nmodule.exports = r;","map":{"version":3,"sources":["/home/mateus/Documents/Projects/alura-challenge/node_modules/highlight.js/lib/languages/r.js"],"names":["source","re","stripOptionsFromArgs","args","opts","length","constructor","Object","splice","either","joined","capture","map","x","join","r","hljs","IDENT_RE","NUMBER_TYPES_RE","OPERATORS_RE","PUNCTUATION_RE","name","keywords","$pattern","keyword","literal","built_in","contains","COMMENT","scope","begin","starts","endsParent","end","excludeBegin","variants","HASH_COMMENT_MODE","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","relevance","match","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  const NUMBER_TYPES_RE = either(\n    // Special case: only hexadecimal binary powers can contain fractions\n    /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n    // Hexadecimal numbers without fraction and optional binary power\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/,\n    // Decimal numbers\n    /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/\n  );\n  const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n  const PUNCTUATION_RE = either(\n    /[()]/,\n    /[{}]/,\n    /\\[\\[/,\n    /[[\\]]/,\n    /\\\\/,\n    /,/\n  );\n\n  return {\n    name: 'R',\n\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword:\n        'function if in break next repeat else for while',\n      literal:\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' +\n        'NA_character_|10 NA_complex_|10',\n      built_in:\n        // Builtin constants\n        'LETTERS letters month.abb month.name pi T F ' +\n        // Primitive functions\n        // These are all the functions in `base` that are implemented as a\n        // `.Primitive`, minus those functions that are also keywords.\n        'abs acos acosh all any anyNA Arg as.call as.character ' +\n        'as.complex as.double as.environment as.integer as.logical ' +\n        'as.null.default as.numeric as.raw asin asinh atan atanh attr ' +\n        'attributes baseenv browser c call ceiling class Conj cos cosh ' +\n        'cospi cummax cummin cumprod cumsum digamma dim dimnames ' +\n        'emptyenv exp expression floor forceAndCall gamma gc.time ' +\n        'globalenv Im interactive invisible is.array is.atomic is.call ' +\n        'is.character is.complex is.double is.environment is.expression ' +\n        'is.finite is.function is.infinite is.integer is.language ' +\n        'is.list is.logical is.matrix is.na is.name is.nan is.null ' +\n        'is.numeric is.object is.pairlist is.raw is.recursive is.single ' +\n        'is.symbol lazyLoadDBfetch length lgamma list log max min ' +\n        'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' +\n        'proc.time prod quote range Re rep retracemem return round ' +\n        'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' +\n        'standardGeneric substitute sum switch tan tanh tanpi tracemem ' +\n        'trigamma trunc unclass untracemem UseMethod xtfrm',\n    },\n\n    contains: [\n      // Roxygen comments\n      hljs.COMMENT(\n        /#'/,\n        /$/,\n        {\n          contains: [\n            {\n              // Handle `@examples` separately to cause all subsequent code\n              // until the next `@`-tag on its own line to be kept as-is,\n              // preventing highlighting. This code is example R code, so nested\n              // doctags shouldn’t be treated as such. See\n              // `test/markup/r/roxygen.txt` for an example.\n              scope: 'doctag',\n              begin: '@examples',\n              starts: {\n                contains: [\n                  { begin: /\\n/ },\n                  {\n                    begin: /#'\\s*(?=@[a-zA-Z]+)/,\n                    endsParent: true,\n                  },\n                  {\n                    begin: /#'/,\n                    end: /$/,\n                    excludeBegin: true,\n                  }\n                ]\n              }\n            },\n            {\n              // Handle `@param` to highlight the parameter name following\n              // after.\n              scope: 'doctag',\n              begin: '@param',\n              end: /$/,\n              contains: [\n                {\n                  scope: 'variable',\n                  variants: [\n                    { begin: IDENT_RE },\n                    { begin: /`(?:\\\\.|[^`\\\\])+`/ }\n                  ],\n                  endsParent: true\n                }\n              ]\n            },\n            {\n              scope: 'doctag',\n              begin: /@[a-zA-Z]+/\n            },\n            {\n              scope: 'keyword',\n              begin: /\\\\[a-zA-Z]+/,\n            }\n          ]\n        }\n      ),\n\n      hljs.HASH_COMMENT_MODE,\n\n      {\n        scope: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\(/, end: /\\)(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\{/, end: /\\}(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\[/, end: /\\](-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\(/, end: /\\)(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\{/, end: /\\}(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\[/, end: /\\](-*)'/ }),\n          {begin: '\"', end: '\"', relevance: 0},\n          {begin: \"'\", end: \"'\", relevance: 0}\n        ],\n      },\n\n      // Matching numbers immediately following punctuation and operators is\n      // tricky since we need to look at the character ahead of a number to\n      // ensure the number is not part of an identifier, and we cannot use\n      // negative look-behind assertions. So instead we explicitly handle all\n      // possible combinations of (operator|punctuation), number.\n      // TODO: replace with negative look-behind when available\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n      // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n      {\n        relevance: 0,\n        variants: [\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              OPERATORS_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              /%[^%]*%/,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'punctuation',\n              2: 'number'\n            },\n            match: [\n              PUNCTUATION_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: { 2: 'number' },\n            match: [\n              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\n              NUMBER_TYPES_RE\n            ]\n          }\n        ]\n      },\n\n      // Operators/punctuation when they're not directly followed by numbers\n      {\n        // Relevance boost for the most common assignment form.\n        scope: { 3: 'operator' },\n        match: [\n          IDENT_RE,\n          /\\s+/,\n          /<-/,\n          /\\s+/\n        ]\n      },\n\n      {\n        scope: 'operator',\n        relevance: 0,\n        variants: [\n          { match: OPERATORS_RE },\n          { match: /%[^%]*%/ }\n        ]\n      },\n\n      {\n        scope: 'punctuation',\n        relevance: 0,\n        match: PUNCTUATION_RE\n      },\n\n      {\n        // Escaped identifier\n        begin: '`',\n        end: '`',\n        contains: [\n          { begin: /\\\\./ }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = r;\n"]},"metadata":{},"sourceType":"script"}